plugins {
    id "UpetIDs.java-infrastructure-conventions"
    id "com.jfrog.bintray" version "1.8.5"
    id 'maven'
    id 'maven-publish'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "danielbustamante"
            name "Daniel Bustamante Ospina"
            email "dbustamantee69@gmail.com"
        }
    }

    scm {
        url "git@github.com:uPet/upet-identifications.git"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'co.upet.commons'
            artifactId 'async-reporter'
            version '1.0.2'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Async Reporter')
                root.appendNode('name', 'async-reporter')
                root.appendNode('url', 'https://site_for_lib.tld')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']
    publish = true
    pkg {
        repo = 'upet-commons'
        userOrg = 'upet'
        name = 'async-reporter'
        licenses = ['Apache-2.0']
        vcsUrl = 'git@github.com:uPet/upet-identifications.git'
        version {
            name = project.property('version')
            desc = 'First version'
            released  = new Date()
            vcsTag = project.property('version')
        }
    }
}


dependencies {
    compileOnly "org.springframework:spring-context"
    compileOnly 'io.sentry:sentry-spring:12.0.1'
    compileOnly "org.reactivecommons:async-commons:${reactiveCommonsVersion}"


    testImplementation "org.springframework:spring-context"
    testImplementation 'io.sentry:sentry-spring:12.0.1'
    implementation("io.micrometer:micrometer-registry-prometheus")
    testImplementation "org.reactivecommons:async-commons:${reactiveCommonsVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile('org.junit.vintage:junit-vintage-engine')
}

